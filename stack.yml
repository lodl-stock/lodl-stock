version: "3.8"
services:
  auth:
    hostname: auth
    container_name: auth
    image: mariateaca/lodl-stock-auth:latest
    volumes:
      # - './auth/src:/app/src'
      - '/app/node_modules'
    environment:
      PORT: ${AUTH_PORT}
      DATABASE_URL: mysql://${DB_USER}:${DB_PASSWORD}@mariadb:3306/${DB_DATABASE}
    ports:
      - "5000:5000"
    depends_on:
      - mariadb
    # Auth service should start first after db service, so let it update
    # database schema
    command: bash -c "sleep 10 ; npx prisma db push --accept-data-loss && npm run server:watch"
    networks:
      - db_auth
      - auth_business
      - auth_mailer
      - prometheus
      - network_kong

  business:
    hostname: business
    container_name: business
    image: mariateaca/lodl-stock-business:latest
    volumes:
      # - './business/src:/app/src'
      - '/app/node_modules'
    environment:
      PORT: ${BUSINESS_PORT}
      DATABASE_URL: mysql://${DB_USER}:${DB_PASSWORD}@mariadb:3306/${DB_DATABASE}
    ports:
      - "5001:5001"
    depends_on:
      - mariadb
      - auth
    command: bash -c "sleep 10 ; npm run server:watch"
    networks:
      - db_business
      - auth_business
      - prometheus
      - network_kong

  mailer:
    hostname: mailer
    container_name: mailer
    image: mariateaca/lodl-stock-mailer:latest
    volumes:
      # - './mailer/src:/app/src'
      - '/app/node_modules'
    environment:
      PORT: ${MAILER_PORT}
      DATABASE_URL: mysql://${DB_USER}:${DB_PASSWORD}@mariadb:3306/${DB_DATABASE}
      mailUser: ${mailUser}
      mailPass: ${mailPass}
    ports:
      - "5002:5002"
    depends_on:
      - mariadb
      - business
      - auth
    command: bash -c "sleep 10 ; npm run server:watch"
    networks:
      - db_mailer
      - auth_mailer
      - prometheus
      - network_kong

  mariadb:
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    image: mariadb:latest
    environment:
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
    ports:
      - "3306:3306"
    networks:
      - db_business
      - db_admin
      - db_auth
      - db_mailer
    volumes:
      - db-mariadb:/var/lib/mysql

  dbadmin:
    hostname: dbadmin
    container_name: dbadmin
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    image: phpmyadmin
    depends_on:
      - mariadb
    environment:
      PMA_HOST: mariadb
      PMA_PORT: 3306
    networks:
      - db_admin
      - network_kong
    ports:
      - "8080:80"

  prometheus:
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prom_data:/prometheus
      - /home/lodl/lodl-stock/prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - prometheus
      - network_grafana
    depends_on:
      - auth
      - business
      - mailer

  grafana:
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS}
    volumes:
      - /home/lodl/lodl-stock//grafana:/etc/grafana/provisioning/datasources
      - grafana-storage:/var/lib/grafana
    networks:
      - network_grafana
      - network_kong

  kong:
    image: kong:latest
    container_name: kong
    depends_on:
      - prometheus
      - grafana
      - mariadb
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
    command: "kong start"
    volumes:
      - ./Kong:/opt/kong
    networks:
      - network_kong
      - network_grafana

networks:
  db_auth:
  db_business:
  db_mailer:
  auth_business:
  auth_mailer:
  db_admin:
  prometheus:
  network_grafana:
  network_kong:

volumes:
  db-mariadb:
  prom_data:
  grafana-storage:
